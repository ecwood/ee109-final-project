registers
	16 vector registers
	16 float registers
	
	registers 0-14 normal
	register 15 = zero register (always reads as 0)


a_ggg_oo_src1_src2_dest

a_ggg = 0xxx : arithmetic inst
a_ggg = 1xxx : add scalar immediate

0_000_oo_vvvv_vvvv_vvvv
	add
		add v1 v2 v3       : v1 = v2 + v3
	sub
		sub v1 v2 v3       : v1 = v2 - v3
	normalize*
		norm v1 v2         : v1 = v2 / |v2|

0_001_oo_vvvv_vvvv_ssss
	magnitude*
		mag r1 v2          : r1 = |v2|
	magnitude squared*
		mags r1 v2         : r1 = |v2|^2
	dot product
		dot r1 v2 v3       : r1 = v2 . v3

0_010_oo_vvvv_ssss_vvvv
	scalar multiply
		smult v1 v2 r3     : v1 = v2 * r3
	scalar divide
		sdiv v1 v2 r3      : v1 = v2 / r3

0_011_oo_vvvv_ssss_ssss
	sqrt**
		sqrt r1 r2         : r1 = sqrt(r2)

0_111_oo_ssss_ssss_ssss
	add
		add r1 r2 r3       : r1 = r2 + r3
	sub
		sub r1 r2 r3       : r1 = r2 - r3
	mult
		mult r1 r2 r3      : r1 = r2 * r3
	div
		div r1 r2 r3       : r1 = r2 / r3


1_gg_II_IIII_ssss_cccc
	for         00: cccc = scalar reg
	for 01, 10, 11: cccc = vector reg
	00: add immediate
		addi r1 r2 imm     : r1 = r2 + (sign extend) imm
	01: vector add immediate x
		vaddi.x v1 r2 imm  : v1.x = r2 + (sign extend) imm
	10: vector add immediate y
		vaddi.y v1 r2 imm  : v1.y = r2 + (sign extend) imm
	11: vector add immediate z
		vaddi.z v1 r2 imm  : v1.z = r2 + (sign extend) imm


*src2 unused
**src1 unused
