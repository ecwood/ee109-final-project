add
	vec, vec   -> vec
sub
	vec, vec   -> vec
normalize
	vec        -> vec

scalar multiply
	vec, float -> vec
scalar divide
	vec, float -> vec

magnitude
	vec        -> float
magnitude squared
	vec        -> float
dot product
	vec, vec   -> float





registers
	16 vector registers
	16 float registers
	
	registers 0-14 normal
	register 15 = zero register (always reads as 0)


a_gg_oo_src1_src2_dest

a_gg = 0xx : arithmetic inst
a_gg = 1xx : add scalar immediate

0_00_oo_vvvv_vvvv_vvvv
	add
		dest = src1 + src2
	sub
		dest = src1 - src2
	normalize*
		dest = src1 / |src1|

0_01_oo_vvvv_vvvv_ssss
	magnitude*
		dest = |src1|
	magnitude squared*
		dest = |src1|^2
	dot product
		dest = src1 . src2

0_10_oo_vvvv_ssss_vvvv
	scalar multiply
		dest = src1 * src2
	scalar divide
		dest = src1 / src2

0_11_oo_vvvv_ssss_ssss
	sqrt**
		dest = sqrt(src2)


1_gg_II_IIII_ssss_cccc
	for         00: cccc = scalar reg
	for 01, 10, 11: cccc = vector reg
	00: addi
		dest = src2 + (sign extend) 6'bIIIIII
	01: vaddi.x
		dest.x = src2 + (sign extend) 6'bIIIIII
	10: vaddi.y
		dest.y = src2 + (sign extend) 6'bIIIIII
	11: vaddi.z
		dest.z = src2 + (sign extend) 6'bIIIIII


*src2 unused
**src1 unused
